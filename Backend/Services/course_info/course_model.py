# generated by datamodel-codegen:
#   filename:  general_course.schema.json
#   timestamp: 2025-02-26T21:49:53+00:00

from __future__ import annotations
from typing import List, Optional
from pydantic import AnyUrl, BaseModel, Field
# from datetime import date


class LectureSection(BaseModel):
    identifier: Optional[str] = Field(
        None, description="Identifier for the lecture section (e.g., '0101')"
    )
    time: Optional[str] = Field(None, description='Scheduled time for the lecture section')
    location: Optional[str] = Field(None, description='Location of the lecture section')


class Platform(BaseModel):
    name: Optional[str] = Field(
        None, description='Name of the communication platform (e.g., Piazza, Canvas)'
    )
    url: Optional[AnyUrl] = Field(None, description='URL for the communication platform')


class Communication(BaseModel):
    platforms: Optional[List[Platform]] = Field(
        None, description='List of communication platforms'
    )


class Submission(BaseModel):
    platform: Optional[str] = Field(None, description='Submission platform (e.g., MarkUs)')
    policy: Optional[str] = Field(None, description='Submission policy details')


class Resource(BaseModel):
    name: Optional[str] = Field(None, description='Name of the resource')
    link: Optional[AnyUrl] = Field(None, description='URL to the resource')


class LabScheduleItem(BaseModel):
    week: Optional[int] = Field(None, description='Lab week number')
    date: Optional[str] = Field(None, description='Date of the lab session')
    topic: Optional[str] = Field(None, description='Topic of the lab session')
    notes: Optional[str] = Field(None, description='Additional notes')
    resources: Optional[List[Resource]] = Field(None, description='List of resource names and urls')


class StaffScheduleItem(BaseModel):
    day: Optional[str] = Field(None, description='Day of the week')
    time: Optional[str] = Field(None, description='Time range for office hours')


class StaffItem(BaseModel):
    name: Optional[str] = Field(None, description='Name of the staff member')
    role: Optional[str] = Field(None, description='Role (e.g., Instructor, TA)')
    schedule: Optional[List[StaffScheduleItem]] = Field(
        None, description='Office hours schedule for the staff member'
    )


class Lecture(BaseModel):
    number: Optional[int] = Field(None, description='Lecture number')
    topic: Optional[str] = Field(None, description='Topic or title of the lecture')
    resources: Optional[List[Resource]] = Field(None, description='Lecture resources')


class Assignment(BaseModel):
    type: Optional[str] = Field(None, description='Type of assessment (assignment, project, test, participation)')
    name: Optional[str] = Field(None, description='Name of assessment')
    due_date: Optional[str] = Field(None, description='Due date in ISO format')
    weight: Optional[float] = Field(None, description='Percentage weight of assessment')
    team_size: Optional[str] = Field(None, description='Allowed team size (e.g., "5-7")')
    description: Optional[str] = Field(None, description='Additional details about assessment')
    resources: Optional[List[Resource]] = Field(None, description='Assignment resources')


class Test(BaseModel):
    name: Optional[str] = Field(None, description='Name of the test (e.g., "Midterm 1", "Final Exam")')
    test_date: Optional[str] = Field(None, description='Date of the test in ISO format')
    time: Optional[str] = Field(None, description='Time of the test (e.g., "14:00-16:00")')
    location: Optional[str] = Field(None, description='Location where the test will be held')
    duration: Optional[str] = Field(None, description='Duration of the test (e.g., "2 hours")')
    format: Optional[str] = Field(None, description='Format of the test (e.g., "Open book", "Closed book")')
    coverage: Optional[str] = Field(None, description='Topics or lectures covered in the test')
    weight: Optional[float] = Field(None, description='Percentage weight of test in final grade')
    resources: Optional[List[Resource]] = Field(None, description='Test resources such as practice tests')


class Policy(BaseModel):
    academic_integrity: Optional[str] = Field(None, description='Academic integrity policy')
    late_submission: Optional[str] = Field(None, description='Late submission rules')
    ai_usage: Optional[str] = Field(None, description='AI tools usage policy')
    remark_requests: Optional[str] = Field(None, description='Remark request policy')


class CourseInformation(BaseModel):
    id: Optional[str] = Field(None, description='Unique course code. e.g., CSC301H5S')
    title: Optional[str] = Field(None, description='Full course title')
    course_url: Optional[str] = Field(
        None,
        description="Url of course website (e.g., 'https://q.utoronto.ca/courses/373305')",
    )
    term: Optional[str] = Field(None, description='Term or semester identifier')
    communication: Optional[Communication] = Field(
        None, description='Communication channels for the course'
    )
    policies: Optional[Policy] = Field(None, description='Course policies')
    textbooks: Optional[List[str]] = Field(None, description='List of required textbooks')


class LectureSections(BaseModel):
    lecture_sections: Optional[List[LectureSection]] = Field(
        None, description='List of lecture sections'
    )


class Labs(BaseModel):
    start_week: Optional[int] = Field(None, description='Week number when labs begin')
    submission: Optional[Submission] = Field(None, description='Lab submission details')
    schedule: Optional[List[LabScheduleItem]] = Field(None, description='Schedule of lab sessions')


class OfficeHours(BaseModel):
    staff: Optional[List[StaffItem]] = Field(
        None, description='List of staff members with office hours'
    )


class Lectures(BaseModel):
    lectures: Optional[List[Lecture]] = Field(None, description='List of lectures')


class Assignments(BaseModel):
    assignments: Optional[List[Assignment]] = Field(
        None, description='List of assignments, projects, or other graded work'
    )


class Tests(BaseModel):
    tests: Optional[List[Test]] = Field(
        None, description='List of tests and examinations for the course'
    )

HIGH_LEVEL_FIELDS = [
    CourseInformation,
    LectureSections,
    Labs,
    OfficeHours, 
    Lectures, 
    Assignments, 
    Tests
]